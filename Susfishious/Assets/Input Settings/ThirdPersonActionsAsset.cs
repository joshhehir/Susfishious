//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Settings/ThirdPersonActionsAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ThirdPersonActionsAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ThirdPersonActionsAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ThirdPersonActionsAsset"",
    ""maps"": [
        {
            ""name"": ""Player_character"",
            ""id"": ""39c69f03-8f2b-47d6-8ee4-95267874ddec"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fab52b98-1a74-4db2-9388-9b6cb8c86102"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2a37ed42-cec6-4d8c-a7d8-4965b202304e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""05594130-53a7-444c-a5fe-ea7429570e1f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""66f6d646-b22e-4c3c-ba0a-d405783b2bb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionA"",
                    ""type"": ""Button"",
                    ""id"": ""2cf670b6-8955-4f19-a331-a1689096f984"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActionB"",
                    ""type"": ""Button"",
                    ""id"": ""81040206-fa12-4436-8a0e-69918b0f8532"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""1d6622de-7b2a-48d0-bb49-4adb46eeef0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8a693af4-44a5-4e5f-a825-d66ec23bb61c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a10e9c05-f96f-4818-bdaf-16f18e18ba40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce41582c-5875-41df-9550-8795f07352ac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""856a05ad-a804-4da4-bfe2-e79aac0a7ad5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1b40f345-5906-4307-b55f-d9cf80d9494e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6f25c164-27e8-4c54-b87b-0bb759bc7ffe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8b42951-2806-4462-8dd5-7ebb9e7bc4e7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""410476be-0b16-4759-9dcb-e650fe3df10e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c088e6cc-d0e3-427b-a1c9-932517725a3c"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""017c0cd1-fba4-4313-9ac8-03f16242950c"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcd8d6f4-fd39-45fe-adee-107d44d8723c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_character
        m_Player_character = asset.FindActionMap("Player_character", throwIfNotFound: true);
        m_Player_character_Move = m_Player_character.FindAction("Move", throwIfNotFound: true);
        m_Player_character_Jump = m_Player_character.FindAction("Jump", throwIfNotFound: true);
        m_Player_character_Look = m_Player_character.FindAction("Look", throwIfNotFound: true);
        m_Player_character_Interact = m_Player_character.FindAction("Interact", throwIfNotFound: true);
        m_Player_character_ActionA = m_Player_character.FindAction("ActionA", throwIfNotFound: true);
        m_Player_character_ActionB = m_Player_character.FindAction("ActionB", throwIfNotFound: true);
        m_Player_character_Start = m_Player_character.FindAction("Start", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_character
    private readonly InputActionMap m_Player_character;
    private IPlayer_characterActions m_Player_characterActionsCallbackInterface;
    private readonly InputAction m_Player_character_Move;
    private readonly InputAction m_Player_character_Jump;
    private readonly InputAction m_Player_character_Look;
    private readonly InputAction m_Player_character_Interact;
    private readonly InputAction m_Player_character_ActionA;
    private readonly InputAction m_Player_character_ActionB;
    private readonly InputAction m_Player_character_Start;
    public struct Player_characterActions
    {
        private @ThirdPersonActionsAsset m_Wrapper;
        public Player_characterActions(@ThirdPersonActionsAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_character_Move;
        public InputAction @Jump => m_Wrapper.m_Player_character_Jump;
        public InputAction @Look => m_Wrapper.m_Player_character_Look;
        public InputAction @Interact => m_Wrapper.m_Player_character_Interact;
        public InputAction @ActionA => m_Wrapper.m_Player_character_ActionA;
        public InputAction @ActionB => m_Wrapper.m_Player_character_ActionB;
        public InputAction @Start => m_Wrapper.m_Player_character_Start;
        public InputActionMap Get() { return m_Wrapper.m_Player_character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_characterActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_characterActions instance)
        {
            if (m_Wrapper.m_Player_characterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnLook;
                @Interact.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnInteract;
                @ActionA.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionA;
                @ActionA.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionA;
                @ActionA.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionA;
                @ActionB.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionB;
                @ActionB.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionB;
                @ActionB.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnActionB;
                @Start.started -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_Player_characterActionsCallbackInterface.OnStart;
            }
            m_Wrapper.m_Player_characterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @ActionA.started += instance.OnActionA;
                @ActionA.performed += instance.OnActionA;
                @ActionA.canceled += instance.OnActionA;
                @ActionB.started += instance.OnActionB;
                @ActionB.performed += instance.OnActionB;
                @ActionB.canceled += instance.OnActionB;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
            }
        }
    }
    public Player_characterActions @Player_character => new Player_characterActions(this);
    public interface IPlayer_characterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnActionA(InputAction.CallbackContext context);
        void OnActionB(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
    }
}
